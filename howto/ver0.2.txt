HOWTO USE TAP FOR JAVA VERSION 0.2!

here is an example how to use it (replace <CLASS> with your class):

    public static void main(String[] args)
    {
        /*
         * Make START the starting index of your test (START >= 0)
         * Make AVAIL the number of tests (START, START+1, ..START+AVAIL-1)
         */

        int[] todo = TapTest.parse_cmd("java <CLASS>", args, START, AVAIL);
        /*
         * If parse_cmd returns something negative, parse had failed
         * (e.g. user input out of range of the available tests)
         */
        if (todo.length == 1 && todo[0] < 0) {
            System.exit(-todo[0]);
        }
        int[] plan = new int[todo.length];

        /* Map todo to plan somehow... (this part is left to you) */

        TapTest t = new TapTest();
        t.plan (plan);

        int error;

        /*
         * You can also just pick the FALSE branch if you don't
         * want fatal execution.  ~EX_BADPLAN makes bad subplans
         * not fatal (though the error bit would still be set.)
         */
        if (DEBUG) {
            error = t.runff(todo, plan, <CLASS>::new, ~TapTest.EX_BADPLAN);
        }
        else {
            error = t.run(todo, plan, <CLASS>::new);
        }

        if (t.done_testing()) {
            error |= TapTest.EX_BADPLAN;
        }

        /*
         * I don't want things to quit when *we* plan is
         * bad, so clear the EX_BADPLAN bit.
         */
        System.exit(error & ~TapTest.EX_BADPLAN);
    }

in your tests, accept TapTest as an argument and return
whatever you like (void/boolean both work, just make sure
the method parameter now takes an argument)

    public boolean test8(TapTest t)
    {
        t.init_subtest(8);
        t.ok(true, "Things looking good!");
        return t.done_subtest();
    }

i am using a subtest because the plan you set goes into a
subplan (with the number of tests run up to this point going
into origin())... i'm not sure if you can make a normal plan
out of that; but we're planning outside, so you can kind of
see where i was going with this -- right :x

everything else remains the same. the difference is things are
more modular *while* being robust enough to get stuff done :)
